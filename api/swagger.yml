# lets api version 1
swagger: '2.0'
info:
  title: lets api
  description: lets api version 1. Initial release
  version: "1.0.0"
# the domain of the service
host: localhost:4000
# array of all schemes that API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /api/v1
produces:
  - application/json
consumes:
  - application/json
securityDefinitions:
  Bearer:
    description: |
      For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header. A valid JWT token is generated by the API and retourned as answer of a call to the route /login giving a valid user & password.

      The following syntax must be used in the header

      "Authorization: Bearer <token>"
    type: apiKey
    name: Authorization
    in: header
paths:
  /login:
    post:
      summary: Authenticate a user using username, email, phone number and password.
      description: |
        Authenticate a user and generate access token for the user. This access token is Bearer access token and must be supplied in Authorization header for any secured api calls. This endpoint is a single source of truth for user identification in the whole application.
      parameters:
        - name: body
          in: body
          description: The request body
          required: true
          schema:
            $ref: "#/definitions/LoginReq"
      tags:
        - users:identity
      responses:
        200:
          description: The login response
          schema:
            $ref: "#/definitions/LoginRes"
        203:
          description: |
            Subset of 200 response.
            Server responds with this status when user phone number is not verified
          schema:
            $ref: "#/definitions/LoginWithVerificationRes"
        401:
          description: Invalid username or password
          schema:
            $ref: "#/definitions/Error"
        404:
          description: user not found with specified username, email or phone number
          schema:
            $ref: "#/definitions/Error"
        403:
          description: The user is not allowed to acces, case when user is blocked to access the application.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /login/social/google:
    post:
      summary: Login a user using google.
      description: |
        Login a user using google.
      parameters:
        - name: body
          in: body
          description: The request body
          required: true
          schema:
            $ref: "#/definitions/SocialLoginReq"
      tags:
        - users:identity
      responses:
        200:
          description: User logged in successfully
          schema:
            $ref: "#/definitions/LoginRes"
        203:
          description: |
            Subset of 200 response.
            Server responds with this status when user phone number is not verified
          schema:
            $ref: "#/definitions/LoginWithVerificationRes"
        400:
          description: Request payload is invalid
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid google access token
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User doesn't exist with specified email
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /login/social/facebook:
    post:
      summary: Login a user using facebook.
      description: |
        Login a user using facebook.
      parameters:
        - name: body
          in: body
          description: The request body
          required: true
          schema:
            $ref: "#/definitions/SocialLoginReq"
      tags:
        - users:identity
      responses:
        200:
          description: User logged in successfully
          schema:
            $ref: "#/definitions/LoginRes"
        203:
          description: |
            Subset of 200 response.
            Server responds with this status when user phone number is not verified
          schema:
            $ref: "#/definitions/LoginWithVerificationRes"
        400:
          description: Request payload is invalid
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid facebook access token
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User doesn't exist with specified email
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /signup:
    post:
      summary: Signup a user.
      description: |
        Signup a user using email.
      parameters:
        - name: body
          in: body
          description: The request body
          required: true
          schema:
            $ref: "#/definitions/SignupReq"
        - name: force
          in: query
          description: In development mode specify true to re register user with same email.
          type: boolean
      tags:
        - users:signup
      responses:
        201:
          description: User signuped successfully
          schema:
            $ref: "#/definitions/LoginRes"
        400:
          description: Request payload is invalid
          schema:
            $ref: "#/definitions/Error"
        409:
          description: User already exists with specified email/username
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/send-verification-code:
    post:
      summary: Send verification code to user's phone number
      description: |
        Once user has signed up user has to verify a phone number. This API sends verification code to user's phone number
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request body
          required: true
          schema:
            $ref: "#/definitions/SendVerificationCodeReq"
      security:
        - Bearer: []
      tags:
        - users:identity
      responses:
        200:
          description: Verification code sent successfully
          schema:
            $ref: "#/definitions/SendVerificationCodeRes"
        400:
          description: Invalid request payload
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in Uuer don't have permission to send verification code
          schema:
            $ref: "#/definitions/Error"
        409:
          description: Phone number is already associated with some other user
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/verify-code:
    post:
      summary: Verify the verification code sent earlier.
      description: |
        Once user has signed up user has to verify a phone number. This API verifies the verification code sent to user's device.
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request body
          required: true
          schema:
            $ref: "#/definitions/VerifyCodeReq"
      security:
        - Bearer: []
      tags:
        - users:identity
      responses:
        200:
          description: Verification code verified successfully
          schema:
            $ref: "#/definitions/LoginRes"
        400:
          description: Invalid request payload
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in Uuer don't have permission to send verification code
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /forgot-password:
    post:
      summary: Send forgot password email.
      description: |
        An forgot password email is sent to the email address provided in request body. User can reset the password by clicking on reset password link in email.
      parameters:
        - name: body
          in: body
          description: The request body
          required: true
          schema:
            $ref: "#/definitions/ForgotPasswordReq"
      tags:
        - users:identity
      responses:
        200:
          description: Forgot password link sent successfully.
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /reset-password:
    post:
      summary: Reset forgotten password.
      description: |
        Once a user receives the forgot password email, user can reset password with verification code and new password.
      parameters:
        - name: body
          in: body
          description: The request body
          required: true
          schema:
            $ref: "#/definitions/ResetPasswordReq"
      tags:
        - users:identity
      responses:
        200:
          description: Password reset successfully, the user has to login again.
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}:
    get:
      summary: Get a user info
      description: Get user info returns lesser details than the get user profile API
      parameters:
        -
          $ref: "#/parameters/UserId"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: User details
          schema:
            $ref: "#/definitions/User"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/followers:
    get:
      summary: Get a user's followers
      description: |
        The followers references are resolved upto one level deep
      parameters:
        -
          $ref: "#/parameters/UserId"
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
        -
          $ref: "#/parameters/Direction"
        -
          $ref: "#/parameters/FollowStatus"
        -
          name: sort
          in: query
          required: false
          type: string
          description: Allowed values are `createdAt`, `updatedAt`, `id`, `userId`, `followerId`
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: List of user's followers
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                $ref: "#/definitions/UsersWithFollowState"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in user don't have permission to view user's followers
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Add users as followers
      description: |
        The list of user ids are added as current auth user followers
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/AddRemoveFollowersReq"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: Operation is successful, users added as followers
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in user don't have permission to add followers
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Remove users from followers list
      description: |
        The list of user ids are removed as current auth user followers
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/AddRemoveFollowersReq"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: Operation is successful, users removed followers list
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in user don't have permission to remove followers
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/block-list:
    post:
      summary: Add users to current auth user block list
      description: |
        The list of user ids are added in current auth user block list
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/AddRemoveBlockReq"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: Operation is successful, users added in block list
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in user don't have permission to add users to block list
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Remove users from block list
      description: |
        The list of user ids are removed from current auth user block list
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/AddRemoveBlockReq"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: Operation is successful, users removed from block list
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in user don't have permission to remove users from block list
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/followers/approve:
    post:
      summary: Approve a user follower request
      description: |
        If the user has turned on approveFollower setting than each of the follower requests must be explicitly approved
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/AddRemoveFollowersReq"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: Operation is successful, follower request approved
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in user don't have permission to approve followers
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/followers/reject:
    post:
      summary: Reject a user follower request
      description: |
        If the user has turned on approveFollower setting than each of the follower requests must be explicitly approved or rejected
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/AddRemoveFollowersReq"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: Operation is successful, follower request rejected
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in user don't have permission to reject followers
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/followings:
    get:
      summary: Get a user's followings
      description: |
        The following references are resolved upto one level deep
      parameters:
        -
          $ref: "#/parameters/UserId"
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
        -
          $ref: "#/parameters/FollowStatus"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: List of user's followings
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                $ref: "#/definitions/UsersWithFollowState"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in user don't have permission to view user's followings
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/profile:
    get:
      summary: Get a user's detailed profile
      description: |
        The user's profile as can be seen by the logged in user
      parameters:
        -
          $ref: "#/parameters/UserId"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: The user's profile
          schema:
            $ref: "#/definitions/Profile"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in Uuer don't have permission to view user's profile
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: Update a user's profile
      description: |
        Update the user's profile. User profile includes bio, name etc
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/UserProfileUpdateReq"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: The user's updated profile
        400:
          description: Invalid request payload
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in Uuer don't have permission to view user's profile
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/profile/photos:
    post:
      summary: Add a photo to a user profile
      description: Add photo to a user profile
      consumes:
        - multipart/form-data
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: files
          in: formData
          description: |
            The files to uploaded and resized.
            The server only supports single file for the API.
          required: true
          type: file
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: The photos added successfully
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to add photos to the profile.
            A user can only add photos to self account.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/refresh-token:
    post:
      summary: Refresh the access token
      description: |
        Access token are long lived bearer tokens but they do expire. Refresh token will never expire.
        Refresh token can be used to refresh access tokens.
        Pass the refresh token as bearer token.
      security:
        - Bearer: []
      tags:
        - users:identity
      responses:
        200:
          description: New access token is issued
          schema:
            $ref: "#/definitions/LoginRes"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/verify-email:
    post:
      summary: Verify user's email address.
      description: |
        Once user has signed up user has to verify email address. This API verifies the verification code sent to user's email.
      parameters:
        - name: body
          in: body
          description: The request body
          required: true
          schema:
            $ref: "#/definitions/VerifyEmailReq"
      tags:
        - users:identity
      responses:
        200:
          description: Email verified successfully
        400:
          description: Invalid request payload
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Logged in Uuer don't have permission to send verification code
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/notification-preferences:
    get:
      summary: Get a user's notifications preferences
      description: Get a user's notification preferences. Notification preferences are stored as bitset value.
      parameters:
        -
          $ref: "#/parameters/UserId"
      security:
        - Bearer: []
      tags:
        - users:notifications
      responses:
        200:
          description: A user notification preferences
          schema:
            $ref: "#/definitions/NotificationPreferences"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to view user's notification preferences.
            A user can only view self notification preferences
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: Update a user's notifications preferences
      description: Update a user's notification preferences. Notification preferences are stored as bitset value.
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/NotificationPreferences"
      security:
        - Bearer: []
      tags:
        - users:notifications
      responses:
        200:
          description: The updated notification preferences
          schema:
            $ref: "#/definitions/NotificationPreferences"
        400:
          description: Invalid request payload
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to view user's notification preferences.
            A user can only update self notification preferences
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/calendars:
    get:
      summary: Get a user's linked calendars details
      description: Get a user's linked calendars details. This includes user settings of default activity duration.
      parameters:
        -
          $ref: "#/parameters/UserId"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: A user linked calendars details
          schema:
            $ref: "#/definitions/UserLinkedCalendarDetailRes"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to view user's linked calendars.
            A user can only view self linked calendars.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Add/update linked calendar to user account
      description: |
        Initially when user is first created there won't be any linked calendars.
        This API add a new linked calendar to user account if calendar does not already added.
        If the calendar with specified type already added than update the existing record
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/UserLinkedCalendarDetail"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: successfully added the linked calendar
          schema:
            $ref: "#/definitions/UserLinkedCalendarDetailRes"
        400:
          description: Invalid request payload
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to update user's linked calendars.
            A user can only update self linked calendars.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/social/accounts:
    get:
      summary: Get a user's social accounts
      description: Get a user's linked social accounts.
      parameters:
        -
          $ref: "#/parameters/UserId"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        200:
          description: A user linked social accounts
          schema:
            $ref: "#/definitions/UserSocialConnections"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to view user's social connections.
            A user can only view self social connections.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Add a new social connection.
      description: |
        Add a new social connection to user's account.
        The client ios app must initiate the oauth2 flow with the corresponding social provider and must
        finish the oauth2 flow before consuming this api. Social access token is mandatory for this api.
        NOTE: This access token will be verified at server.
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/UserSocialConnectionReq"
      security:
        - Bearer: []
      tags:
        - users
      responses:
        201:
          description: The social connection is added successfully
          schema:
            $ref: "#/definitions/UserSocialConnections"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to add social connection to user's account.
            A user can only add social connection to self account.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/contacts/sync:
    post:
      summary: Sync user contacts
      description: |
        Sync user external contacts with app users data
        Request payload specify user phonebook data
        Server will fetch user contacts from facebook/google combine phonebook data with social contacts
        and resolve references to app users if there is any
      parameters:
        -
          $ref: "#/parameters/UserId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/SyncContactReq"
      security:
        - Bearer: []
      tags:
        - users:contacts
      responses:
        200:
          description: Contact synced successfully
          schema:
            $ref: "#/definitions/UserContacts"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/friends:
    get:
      summary: Get user friends
      description: |
        The user can sync his contacts using `/contacts/sync` API.
        This API returns previously synced contacts and is very fast than sync api.
      parameters:
        -
          $ref: "#/parameters/UserId"
      security:
        - Bearer: []
      tags:
        - users:contacts
      responses:
        200:
          description: List of user contacts
          schema:
            $ref: "#/definitions/UserFriends"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        404:
          description: User not found with specified id
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities:
    post:
      summary: Create an activity
      description: Create an activity, the currently logged in user is the author of activity
      parameters:
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/CreateActivityReq"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        201:
          description: The created activity details
          schema:
            $ref: "#/definitions/ActivityDetail"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}:
    get:
      summary: Get an activity details.
      description: Get an activity details.
      parameters:
        -
          $ref: "#/parameters/ActivityId"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: The activity details
          schema:
            $ref: "#/definitions/ActivityDetail"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: Edit an activity
      description: Edit an activity details.
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/EditActivityReq"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: The updated activity details
          schema:
            $ref: "#/definitions/ActivityDetail"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to edit the activity.
            A user can only edit self authored activities.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Delete an activity
      description: Delete an activity.
      parameters:
        -
          $ref: "#/parameters/ActivityId"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Activity deleted successfully
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to delete the activity.
            A user can only delete self authored activities.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/invitees:
    post:
      summary: Modify activity invitees list.
      description: |
        Modify activity invitees list.
        This api supports invitees and removals parameters, specify the user id's in removals if you want to remove
        a user from the list
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        - name: body
          in: body
          description: The request payload
          required: true
          schema:
            $ref: "#/definitions/ModifyInviteesReq"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: The users invitied successfully
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            User do not have permission to add more invitees.
            A user can add invitees to self authored activities.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    get:
      summary: Get activity invitees list
      description: Get list of users invitied to the specified activity
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: The users list
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                $ref: "#/definitions/GetInviteesRes"
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            User do not have permission to view invitees list.
            A user can only view invitees for self authored activities.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/photos:
    get:
      summary: Get all activity photos
      description: Get all the photos uploaded for the specified activity, this includes comment photos
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: The photos list
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                $ref: "#/definitions/GetPhotosRes"
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Add photos to the activity
      description: Add photos to the activity
      consumes:
        - multipart/form-data
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        - name: files
          in: formData
          description: |
            The files to uploaded and resize.
            The current swagger specification does not allow to specify multiple file uploads.
            This is a limitation for this spec but server does supports multiple file upload.
          required: true
          type: file
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: The photos added successfully
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to add photos to the activity.
            A user can only add photos to self authored activities.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/rsvp/add:
    post:
      summary: RSVP to the activity
      description: Add currently logged in user to the list of rsvp'd users list
      parameters:
        -
          $ref: "#/parameters/ActivityId"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Current user added to rsvp'd users list successfully
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to rsvp to the activity.
            If activity is private only invitied members can rsvp.
            If activity is share only author followers can rsvp.
            If activity is public any user can rsvp.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/rsvp/remove:
    post:
      summary: Undo RSVP to the activity
      description: Remove currently logged in user from the list of rsvp'd users.
      parameters:
        -
          $ref: "#/parameters/ActivityId"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Current user removed from rsvp'd users list successfully
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to rsvp to the activity.
            If activity is private only invitied members can rsvp.
            If activity is share only author followers can rsvp.
            If activity is public any user can rsvp.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/share:
    post:
      summary: Share an activity
      description: |
        Share an activity, the activity that is shared is the parent activity of newly created activity.
        Current user is the author of shared activity.
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        - name: body
          in: body
          description: The optional request payload for the new activity that is created when you share activity
          required: true
          schema:
            $ref: "#/definitions/CreateActivityReq"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        201:
          description: Activity shared successfully, response payload contains new activity details
          schema:
            $ref: "#/definitions/ActivityDetail"
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to share the activity.
            If activity is private only invitied members can share.
            If activity is share only author followers can share.
            If activity is public any user can share.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/comments:
    get:
      summary: Get comments for an activity
      description: |
        Get all the comments for an activity.
        This API supports paginated response
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
        -
          $ref: "#/parameters/Direction"
        -
          name: sort
          in: query
          required: false
          type: string
          description: Allowed values are `createdAt`, `updatedAt`, `activityId`, `author`, `id`
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Paginated response
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                type: array
                items:
                  $ref: "#/definitions/CommentDetail"
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Add a comment to an activity
      description: |
        Add a comment to an activity.
        The comment can have photo or text. To add photos to a comment use `/comments/{commentId}/photos` API
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        - name: body
          in: body
          description: The request payload.
          required: true
          schema:
            $ref: "#/definitions/AddCommentReq"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        201:
          description: Comment added successfully, the response payload contains newly added comment details
          schema:
            $ref: "#/definitions/Comment"
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to comment on the activity.
            If activity is private only invitied members can comment.
            If activity is shared only author followers can comment.
            If activity is public any user can comment.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/likes:
    get:
      summary: Get an activity likes
      description: |
        Get all the likes for an activity.
        This API supports paginated response
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Paginated response
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                $ref: "#/definitions/Users"
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Like an activity
      description: Like an activity, the activity is liked by the current logged in user.
      parameters:
        -
          $ref: "#/parameters/ActivityId"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Activity liked successfully
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to like the activity.
            If activity is private only invitied members can like.
            If activity is shared only author followers can like.
            If activity is public any user can like.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/dislikes:
    post:
      summary: Dislike an activity
      description: Dislike an activity, the activity is disliked by the current logged in user.
      parameters:
        -
          $ref: "#/parameters/ActivityId"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Operation is successful
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to dislike the activity.
            If activity is private only invitied members can dislike.
            If activity is shared only author followers can dislike.
            If activity is public any user can dislike.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/comments/{commentId}/comments:
    get:
      summary: Get comments for a comment
      description: |
        Get all the comments for a comment.
        This API supports paginated response
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        -
          $ref: "#/parameters/CommentId"
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
        -
          $ref: "#/parameters/Direction"
        -
          name: sort
          in: query
          required: false
          type: string
          description: Allowed values are `createdAt`, `updatedAt`, `activityId`, `author`, `id`
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Paginated response
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                type: array
                items:
                  $ref: "#/definitions/CommentDetail"
        404:
          description: Activity not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Add a comment to a comment
      description: Users can only add additional comments to photo comments
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        -
          $ref: "#/parameters/CommentId"
        - name: body
          in: body
          description: The request payload.
          required: true
          schema:
            $ref: "#/definitions/AddCommentReq"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        201:
          description: Comment added successfully, the response payload contains newly added comment details
          schema:
            $ref: "#/definitions/Comment"
        404:
          description: Activity/comment not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to comment on the comment.
            If activity is private only invitied members can comment.
            If activity is shared only author followers can comment.
            If activity is public any user can comment.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/comments/{commentId}/likes:
    get:
      summary: Get a comment likes
      description: |
        Get all the likes for a comment.
        This API supports paginated response
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        -
          $ref: "#/parameters/CommentId"
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Paginated response
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                $ref: "#/definitions/Users"
        404:
          description: Activity/comment not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Like a comment
      description: Like a comment, the comment is liked by the current logged in user.
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        -
          $ref: "#/parameters/CommentId"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Comment liked successfully
        404:
          description: Comment not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to like the comment.
            If activity is private only invitied members can like.
            If activity is shared only author followers can like.
            If activity is public any user can like.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/comments/{commentId}/dislikes:
    post:
      summary: Dislike a comment
      description: Dislike a comment, the comment is disliked by the current logged in user.
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        -
          $ref: "#/parameters/CommentId"
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: Operation is successful
        404:
          description: Activity/Comment not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to dislike the comment.
            If activity is private only invitied members can dislike.
            If activity is shared only author followers can dislike.
            If activity is public any user can dislike.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /activities/{activityId}/comments/{commentId}/photos:
    post:
      summary: Add photos to a comment
      description: Add photos to a comment
      consumes:
        - multipart/form-data
      parameters:
        -
          $ref: "#/parameters/ActivityId"
        -
          $ref: "#/parameters/CommentId"
        - name: files
          in: formData
          description: |
            The files to uploaded and resized.
            The current swagger specification does not allow to specify multiple file uploads.
            This is a limitation for this spec but server does supports multiple file upload.
          required: true
          type: file
      security:
        - Bearer: []
      tags:
        - activities
      responses:
        200:
          description: The photos added successfully
        404:
          description: Comment not found with specified id
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to add photos to the comment.
            A user can only add photos to self authored comments.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /groups:
    post:
      summary: Create a group
      description: Create a group, optionally specify initial list of group members
      parameters:
        - name: body
          in: body
          description: The request payload.
          required: true
          schema:
            $ref: "#/definitions/CreateGroupReq"
      security:
        - Bearer: []
      tags:
        - groups
      responses:
        200:
          description: Group created successfully, response payload includes created group details
          schema:
            $ref: "#/definitions/Group"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /groups/{groupId}:
    get:
      summary: Get a group details
      description: Get a group details, the response payload will have resolved references to group members
      parameters:
        -
          $ref: "#/parameters/GroupId"
      security:
        - Bearer: []
      tags:
        - groups
      responses:
        200:
          description: Operation is successful, response payload includes group details
          schema:
            $ref: "#/definitions/Group"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to view the group details.
            A user can only view group details for which they are admin.
            The creator/owner of the group is the default group admin.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Group not found with specified id
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: Edit a group details
      description: Edit a group details, can optionally specify group members to add/remove
      parameters:
        -
          $ref: "#/parameters/GroupId"
        - name: body
          in: body
          description: The request payload.
          required: true
          schema:
            $ref: "#/definitions/EditGroupReq"
      security:
        - Bearer: []
      tags:
        - groups
      responses:
        200:
          description: Group edited successfully, response payload includes latest updated group details
          schema:
            $ref: "#/definitions/Group"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to edit the group details.
            A user can only edit groups for which they are admin.
            The creator/owner of the group is the default group admin.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Group not found with specified id
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Delete a group
      description: Delete a group, and all of it's members
      parameters:
        -
          $ref: "#/parameters/GroupId"
      security:
        - Bearer: []
      tags:
        - groups
      responses:
        200:
          description: Group deleted successfully
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        403:
          description: |
            Logged in user don't have permission to delete the group.
            A user can only delete groups for which they are admin.
            The creator/owner of the group is the default group admin.
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Group not found with specified id
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /feeds/public:
    get:
      summary: Get public feeds
      description: Get all the public feeds. This API supports paginated response
      parameters:
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
      security:
        - Bearer: []
      tags:
        - feeds
      responses:
        200:
          description: Operation is successful, response payload includes public feeds
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                $ref: "#/definitions/PublicFeeds"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/me/feeds:
    get:
      summary: Get my feeds
      description: Get my feeds. This API supports paginated response
      parameters:
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
      security:
        - Bearer: []
      tags:
        - feeds
      responses:
        200:
          description: Operation is successful, response payload includes public feeds
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                $ref: "#/definitions/MyFeeds"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/profile/feeds:
    get:
      summary: Get a user's profile feeds
      description: Profile feeds includes those activities that are authored by user
      parameters:
        -
          $ref: "#/parameters/UserId"
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
      security:
        - Bearer: []
      tags:
        - feeds
      responses:
        200:
          description: Operation is successful, response payload includes public feeds
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                $ref: "#/definitions/ProfileFeeds"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
  /users/{userId}/upcoming/feeds:
    get:
      summary: Get a user's upcoming feeds
      description: |
        Upcoming feeds are those activities for which the expiry time is in future and
        which are authored by user or user rsvp to the activity.
      parameters:
        -
          $ref: "#/parameters/UserId"
        -
          $ref: "#/parameters/Limit"
        -
          $ref: "#/parameters/Offset"
      security:
        - Bearer: []
      tags:
        - feeds
      responses:
        200:
          description: Operation is successful, response payload includes public feeds
          schema:
            type: object
            properties:
              paging:
                type: object
                properties:
                  next:
                    type: number
                    format: int32
                    description: The next offset
                  total:
                    type: number
                    format: int32
                    description: Total number of records for specified filter criteria
              data:
                $ref: "#/definitions/UpcomingFeeds"
        401:
          description: Invalid/expired authorization header
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unknown error, Occurs in very rare situation, this indicates that server is unable to process the request and is unaware of the error condition
          schema:
            $ref: "#/definitions/Error"
parameters:
  UserId:
    name: userId
    in: path
    description: The user id
    required: true
    type: string
  ActivityId:
    name: activityId
    in: path
    description: The activity id
    required: true
    type: string
  CommentId:
    name: commentId
    in: path
    description: The comment id
    required: true
    type: string
  GroupId:
    name: groupId
    in: path
    description: The group id
    required: true
    type: string
  Limit:
    name: limit
    in: query
    description: The number of records to return, default will be 20
    required: false
    type: number
    format: int64
  Offset:
    name: offset
    in: query
    description: The number of records to skip, default will be 0
    required: false
    type: number
    format: int64
  FollowStatus:
    name: status
    in: query
    description: The follow status. Valid value is `0`.
    required: false
    type: number
    format: int32
  Direction:
    name: direction
    in: query
    required: false
    type: string
    description: Allowed values are `asc` and `desc`
definitions:
  FollowState:
    type: number
    format: int32
    description: |
      The integer status which describes the relationship between current logged in user
      and each user in the followers list.
      This is 32 bit integer and counting from leftmost bit providing below definitions of each bit
      The below definitions will hold true if that particular bit is turned on.
      `For ex: If current user follows specified user than bit at position 1 will be 1`
      0: It means that current user is not following specified user and has not send any following request.
      1 bit: It means that current user is following specified user.
      2 bit: It means that current user has sent following request to specified user and request is in pending state.
      3 bit: It means that current user has sent following request to specified user and request was rejected.
         An important use case to note here is if the request is accepted by the specified user than state will change to following
      4 bit: It means that current user has blocked the specified user.
      5 bit: It means that current user is blocked by the specified user.
      6 bit: It means that the specified user is the current user. It means that current logged in user is in the response payload.
  User:
    type: object
    required:
      - id
      - username
      - email
      - status
    properties:
      id:
        type: string
        description: The unique user id
      username:
        type: string
        description: the user's username
      email:
        type: string
        description: the user's email
      status:
        type: integer
        format: int32
        description: The user's status. A bitset representing various user status
      photo:
        $ref: "#/definitions/ImageWithSignedUrl"
      bio:
        type: string
        description: The user's bio field
      phoneNumbers:
        type: array
        items:
          $ref: "#/definitions/PhoneNumber"
      settings:
        $ref: "#/definitions/UserSetting"
      calendars:
        type: array
        items:
          $ref: "#/definitions/UserLinkedCalendar"
  Users:
    type: array
    items:
      $ref: "#/definitions/User"
  UserWithFollowState:
    type: object
    required:
      - user
      - followState
    properties:
      user:
        $ref: "#/definitions/User"
      followState:
        $ref: "#/definitions/FollowState"
  UsersWithFollowState:
    type: array
    items:
      $ref: "#/definitions/UserWithFollowState"
  Contact:
    type: object
    required:
      - id
      - type
    properties:
      id:
        type: string
        description: The unique id of the contact
      phoneNumber:
        type: string
        description: The phone number of the contact including country code
      email:
        type: string
        description: The email address of the contact
      type:
        type: string
        description: The contact type, valid values are email, phone, facebook, google
      facebookId:
        type: string
        description: The contact facebook id, if this contact is facebook type
      googleId:
        type: string
        description: The contact google id, if this contact is google type
      metadata:
        type: object
        description: Any additional optional meta data for contact
  Contacts:
    type: array
    items:
      $ref: "#/definitions/Contact"
  ContactIds:
    type: array
    items:
      type: string
      description: The unique contact ids
  UserIds:
    type: array
    items:
      type: string
      description: The unique user ids
  GetInviteesRes:
    type: object
    properties:
      users:
        $ref: "#/definitions/Users"
      contacts:
        $ref: "#/definitions/Contacts"
  Profile:
    type: object
    required:
      - id
      - username
      - email
      - status
      - stats
      - followState
    properties:
      id:
        type: string
        description: The unique user id
      username:
        type: string
        description: the user's username
      email:
        type: string
        description: the user's email
      status:
        type: integer
        format: int32
        description: The user's status. A bitset representing various user status
      photo:
        $ref: "#/definitions/ImageWithSignedUrl"
      bio:
        type: string
        description: The user's bio field
      phoneNumbers:
        type: array
        items:
          $ref: "#/definitions/PhoneNumber"
      settings:
        $ref: "#/definitions/UserSetting"
      calendars:
        type: array
        items:
          $ref: "#/definitions/UserLinkedCalendar"
      stats:
        $ref: "#/definitions/ProfileStats"
      followState:
        $ref: "#/definitions/ProfileFollowState"
  ProfileStats:
    type: object
    required:
      - followers
      - followings
      - activities
      - current
    properties:
      followers:
        type: number
        format: int64
        description: The total number of user's followers
      followings:
        type: number
        format: int64
        description: The total number of user's followings
      activities:
        type: number
        format: int64
        description: The total number of user's activities
      current:
        type: number
        format: int64
        description: The total number of user's non expired activities
  ProfileFollowState:
    type: object
    required:
      - status
    properties:
      status:
        type: number
        format: int32
        description: |
          The integer status that represents current user relation with specified user
          This integer is 32 bit, only leftmost 4 bits are used to present the status value
          Counting from leftmost bit
          0: It means that current user is not following specified user and has not send any following request.
          1 bit: This bit is true if current user follows specified user
          2 bit: This bit is true if specified user follows current user
          3 bit: This bit is true when current user blocked specified user
          4 bit: This bit is true when specified user blocked current user
          5 bit: This bit is true if current user is specified user, requesting self authenticated user info
  Group:
    type: object
    required:
      - id
      - title
      - owner
      - createdAt
      - updatedAt
    properties:
      id:
        type: string
        description: The unique id of the group
      title:
        type: string
        description: The group title
      description:
        type: string
        description: The optional group description
      # the group creator/owner, the group owner is default group admin
      owner:
        $ref: "#/definitions/User"
      members:
        $ref: "#/definitions/GroupMembers"
      createdAt:
        type: number
        format: int64
        description: The timestamp at which this resource is created
      updatedAt:
        type: number
        format: int64
        description: The timestamp at which this resource is last updated
  GroupWithFollowState:
    type: object
    required:
      - id
      - title
      - members
    properties:
      id:
        type: string
        description: The unique id of the group
      title:
        type: string
        description: The group title
      description:
        type: string
        description: The optional group description
      members:
        $ref: "#/definitions/GroupMembersWithFollowState"
      createdAt:
        type: number
        format: int64
        description: The timestamp at which this resource is created
      updatedAt:
        type: number
        format: int64
        description: The timestamp at which this resource is last updated
  GroupMembers:
    $ref: "#/definitions/Users"
  GroupMembersWithFollowState:
    $ref: "#/definitions/UsersWithFollowState"
  AddEditGroupMembers:
    type: object
    properties:
      # the new additions to the group
      additions:
        type: object
        properties:
          users:
            $ref: "#/definitions/UserIds"
      # the removals from the group
      removals:
        type: object
        properties:
          users:
            $ref: "#/definitions/UserIds"
  CreateGroupReq:
    type: object
    required:
      - title
    properties:
      title:
        type: string
        description: The group title
      description:
        type: string
        description: The optional group description
      members:
        $ref: "#/definitions/AddEditGroupMembers"
  EditGroupReq:
    type: object
    properties:
      title:
        type: string
        description: The optional group title to update
      description:
        type: string
        description: The optional group description to update
      members:
        $ref: "#/definitions/AddEditGroupMembers"
  UserContacts:
    type: object
    properties:
      users:
        type: array
        items:
          $ref: "#/definitions/UserWithFollowState"
      contacts:
        $ref: "#/definitions/Contacts"
  UserFriends:
    type: object
    properties:
      groups:
        type: array
        items:
          $ref: "#/definitions/GroupWithFollowState"
      users:
        type: array
        items:
          $ref: "#/definitions/UserWithFollowState"
      contacts:
        $ref: "#/definitions/Contacts"
  BasicPhoneNumber:
    type: string
    description: |
      The user phone number, including the country code prefix. For ex: +14343434564
  BasicPhoneNumbers:
    type: array
    items:
      $ref: "#/definitions/BasicPhoneNumber"
  Email:
    type: string
    description: The email address
  Emails:
    type: array
    items:
      $ref: "#/definitions/Email"
  SyncContactReq:
    type: object
    required:
      - phonebook
      - emails
    properties:
      phonebook:
        $ref: "#/definitions/BasicPhoneNumbers"
      emails:
        $ref: "#/definitions/Emails"
  UserSetting:
    type: object
    required:
      - defaultActivityDuration
    properties:
      approveFollowers:
        type: number
        format: int32
        description: flag to indicate whether to approve followers or not
      defaultActivityDuration:
        type: number
        format: int32
        description: The default activity duration if no duration is specified
  PhoneNumber:
    type: object
    required:
      - countryCode
      - phoneNumber
      - primary
      - status
      - deviceType
      - deviceId
    properties:
      countryCode:
        type: string
        description: The country code of user phone number
      phoneNumber:
        type: string
        description: The user phone number
      primary:
        type: number
        format: int32
        description: 1 if this number is main primary number otherwise 0
      status:
        type: number
        format: int32
        description: 1 if this number is verified otherwise 0
      deviceType:
        type: string
        description: The device type for the hardware on which this number was verified
      deviceId:
        type: string
        description: The unique hardware id for the device this number was verified
  UserLinkedCalendarDetailRes:
    type: object
    properties:
      calendars:
        type: array
        items:
          $ref: "#/definitions/UserLinkedCalendar"
      settings:
        $ref: "#/definitions/UserSetting"
  UserLinkedCalendarDetail:
    type: object
    properties:
      calendars:
        type: array
        items:
          $ref: "#/definitions/UserLinkedCalendar"
      defaultActivityDuration:
        type: number
        format: int32
        description: The activity default duration in hours
  UserLinkedCalendar:
    type: object
    required:
      - type
      - autoUpdate
    properties:
      type:
        type: string
        description: The calendar type, can be apple calendar or google calendar
      autoUpdate:
        type: number
        format: int32
        description: 0 if auto update is false, 1 if auto update is true. auto update means that calendar will be automatically updated with activities
      serverAuthCode:
        type: string
        description: |
          If type is google than serverAuthCode is required,
          this auth code is used to get access tokens from google servers
      accessToken:
        type: string
        description: The user access token for this calendar, only needed for `apple` type
      refreshToken:
        type: string
        description: The user refresh token for this calendar
      metadata:
        type: object
        description: Any additional details associated with calendar
  UserSocialConnections:
    type: array
    items:
      $ref: "#/definitions/UserSocialConnection"
  UserSocialConnectionReq:
    type: object
    required:
      - type
    properties:
      accessToken:
        type: string
        description: |
          The social network access token. Only required for facebook connection type
          NOTE: This access token is verified at server.
      refreshToken:
        type: string
        description: The social network refresh token, only required for facebook connection type.
      serverAuthCode:
        type: string
        description: |
          If type is google than serverAuthCode is required,
          this auth code is used to get access tokens from google servers
      type:
        type: string
        description: The social connection type. Allowed values are google, facebook
  UserSocialConnection:
    type: object
    required:
      - type
    properties:
      id:
        type: string
        description: The unique id for this connection
      accessToken:
        type: string
        description: |
          The social network access token.
          NOTE: This access token is verified at server.
      refreshToken:
        type: string
        description: The social network refresh token.
      socialId:
        type: string
        description: The user id on the social network
      profile:
        type: object
        description: The user's profile on the social network. This is optional
      type:
        type: string
        description: The social connection type. Allowed values are google, facebook
  LoginReq:
    type: object
    required:
      - username
      - password
      - deviceId
    properties:
      username:
        type: string
        description: Provide username, email or phone number.
      password:
        type: string
        description: The user password in plain text.
      deviceId:
        type: string
        description: unique device hardware id for the device the login request is originating
  LoginRes:
    type: object
    required:
      - tokens
      - user
    properties:
      tokens:
        type: object
        required:
          - accessToken
        properties:
          accessToken:
            type: string
            description: The bearer access token
          # the optional refresh token. Can be used to refresh access token
          refreshToken:
            type: string
            description: The bearer refresh token. The access token are long lived token, but they do expire. Refresh tokens are used to refresh the access token already issued.
      user:
        $ref: "#/definitions/User"
  LoginWithVerificationRes:
    type: object
    required:
      - tokens
      - user
      - verification
    properties:
      tokens:
        type: object
        required:
          - accessToken
        properties:
          accessToken:
            type: string
            description: The bearer access token
          # the optional refresh token. Can be used to refresh access token
          refreshToken:
            type: string
            description: The bearer refresh token. The access token are long lived token, but they do expire. Refresh tokens are used to refresh the access token already issued.
      user:
        $ref: "#/definitions/User"
      # The verification will only be present in cases where user is logging in from new device
      verification:
        $ref: "#/definitions/SendVerificationCodeRes"
  SignupReq:
    type: object
    required:
      - username
      - fullName
      - email
      - password
    properties:
      username:
        type: string
        description: Provide username, email or phone number.
      fullName:
        type: string
        description: User's full name.
      email:
        type: string
        format: email
        description: User's email. A verification email will be send to this email address.
      password:
        type: string
        description: The user password in plain text.
      social:
        type: object
        required:
          - type
        properties:
          accessToken:
            type: string
            description: The social network access token
          serverAuthCode:
            type: string
            description: |
              If type is google than serverAuthCode is required,
              this auth code is used to get access tokens from google servers
          refreshToken:
            type: string
            description: The social network refresh token
          type:
            type: string
            description: The type of social network, possible values are google, facebook
  SocialLoginReq:
    type: object
    required:
      - token
      - deviceId
    properties:
      token:
        type: string
        description: The social network access token
      deviceId:
        type: string
        description: The unique device hardware id
  ForgotPasswordReq:
    type: object
    required:
      - email
    properties:
      email:
        type: string
        format: email
        description: The email address of user who is trying to reset the password
  ResetPasswordReq:
    type: object
    required:
      - code
      - password
    properties:
      code:
        type: string
        description: The reset password code sent to user's email address
      password:
        type: string
        description: The new password to set
  SendVerificationCodeReq:
    type: object
    properties:
      countryCode:
        type: string
        description: The country code of the phone number
      phoneNumber:
        type: string
        description: The user's phone number, without country code. Country code is supplied as additional property.
      deviceId:
        type: string
        description: The unique device hardware id for this device
      device:
        type: string
        description: The user's device type. Can be iOS or android.
  SendVerificationCodeRes:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: The unique id for this verification request.
  VerifyCodeReq:
    type: object
    required:
      - code
      - id
    properties:
      code:
        type: string
        description: The verification code sent to user's device
      id:
        type: string
        description: The unique verification id generated during send verification code process.
  VerifyEmailReq:
    type: object
    required:
      - token
    properties:
      token:
        type: string
        description: The verification token sent to user's email address.
  NotificationPreferences:
    type: object
    required:
      - preferences
    properties:
      preferences:
        type: integer
        format: int64
        description: Notification preferences stored as bit set value.
  UserProfileUpdateReq:
    type: object
    properties:
      fullName:
        type: string
        description: The user's full name
      bio:
        type: string
        description: The user's bio
      approveFollowers:
        type: number
        format: int32
        description: 0 if approve followers is false, 1 if approve followers is true
  CreateActivityReq:
    type: object
    required:
      - title
      - start
      - privacy
    properties:
      title:
        type: string
        description: The title of the activity
      start:
        type: number
        format: int64
        description: The UNIX timestamp when the activity is due to start
      duration:
        type: number
        format: int32
        description: The duration of activity in minutes
      location:
        type: string
        description: The location of the activity
      meetingPoint:
        type: string
        description: Optional meeting place set by the author
      notes:
        type: string
        description: Any additional notes for the activity
      privacy:
        type: string
        description: The privacy mode of the activity, allowed values are `public`, `private` or `shared`
      # initial list of invitees for the activity
      invitees:
        $ref: "#/definitions/AddInviteesReq"
  EditActivityReq:
    type: object
    properties:
      title:
        type: string
        description: The title of the activity
      start:
        type: number
        format: int64
        description: The UNIX timestamp when the activity is due to start
      duration:
        type: number
        format: int32
        description: The duration of activity in minutes
      location:
        type: string
        description: The location of the activity
      meetingPoint:
        type: string
        description: Optional meeting place set by the author
      notes:
        type: string
        description: Any additional notes for the activity
      invitees:
        $ref: "#/definitions/ModifyInviteesReq"
  AddInviteesReq:
    type: object
    properties:
      users:
        $ref: "#/definitions/UserIds"
      contacts:
        $ref: "#/definitions/ContactIds"
  ModifyInviteesReq:
    type: object
    properties:
      additions:
        type: object
        properties:
          users:
            $ref: "#/definitions/UserIds"
          contacts:
            $ref: "#/definitions/ContactIds"
      removals:
        type: object
        properties:
          users:
            $ref: "#/definitions/UserIds"
          contacts:
            $ref: "#/definitions/ContactIds"
  AddCommentReq:
    type: object
    properties:
      text:
        type: string
        description: |
          The comment text can be optional if this is photo comment, call separate API to add photos to comment
  GetPhotosRes:
    type: array
    items:
      $ref: "#/definitions/PhotoDetail"
  ImagesWithSignedUrl:
    type: array
    items:
      $ref: "#/definitions/ImageWithSignedUrl"
  ImageWithSignedUrl:
    type: object
    required:
      - resolutions
    properties:
      resolutions:
        type: array
        items:
          $ref: "#/definitions/ResolutionWithSignedUrl"
  ResolutionWithSignedUrl:
    type: object
    required:
      - bucket
      - key
      - name
      - signedUrl
    properties:
      bucket:
        type: string
        description: The s3 bucket which contains the file
      key:
        type: string
        description: |
          The s3 object key in the specified bucket.
          A combination of bucket and key uniquely identifies an object in s3
      filename:
        type: string
        description: The original filename of the image
      name:
        type: string
        description: |
          The name key which is equal to `{{width}}_{{height}}` if this image is resized version of original image.
          The name key which is equal to `original` if this is original copy of the uploaded image.
      height:
        type: number
        format: int32
        description: The height of the image in pixels
      width:
        type: number
        format: int32
        description: The width of the image in pixels
      signedUrl:
        type: string
        description: The mandatory signed url to access the secured image resource from s3
  ActivityRsvp:
    type: object
    properties:
      id:
        type: string
        description: The unique id of the resource
      activityId:
        type: string
        description: The unique id of the activity resource
      userId:
        type: string
        description: The unique id of the user resource who rsvp'd
      createdAt:
        type: number
        format: int64
        description: The timestamp at which the resource is created
      updatedAt:
        type: number
        format: int64
        description: The timestamp at which the resource is last updated
  ActivityLike:
    type: object
    properties:
      id:
        type: string
        description: The unique id of the resource
      activityId:
        type: string
        description: The unique id of the activity resource
      userId:
        type: string
        description: The unique id of the user resource who liked
      createdAt:
        type: number
        format: int64
        description: The timestamp at which the resource is created
      updatedAt:
        type: number
        format: int64
        description: The timestamp at which the resource is last updated
  LikeDetail:
    # the user who liked the comment/activity
    $ref: "#/definitions/User"
  PhotoDetail:
    type: object
    properties:
      id:
        type: string
        description: The unique id of the resource
      activityId:
        type: string
        description: The unique id of the activity resource
      photo:
        $ref: "#/definitions/ImageWithSignedUrl"
      createdAt:
        type: number
        format: int64
        description: The timestamp at which the resource is created
      updatedAt:
        type: number
        format: int64
        description: The timestamp at which the resource is last updated
  CommentDetail:
    type: object
    properties:
      id:
        type: string
        description: The unique id of the resource
      activityId:
        type: string
        description: The unique id of the activity resource
      author:
        $ref: "#/definitions/User"
      text:
        type: string
        description: The text comment
      photos:
        $ref: "#/definitions/ImagesWithSignedUrl"
      parent:
        type: string
        description: If this comment is itself a comment on another photo comment, parent represents the photo comment id
      createdAt:
        type: number
        format: int64
        description: The timestamp at which the resource is created
      updatedAt:
        type: number
        format: int64
        description: The timestamp at which the resource is last updated
  ActivityDetail:
    type: object
    required:
      - id
      - privacy
      - author
      - rsvp
      - likes
      - photos
      - comments
      - createdAt
      - updatedAt
    properties:
      id:
        type: string
        description: The unique id of the activity resource
      title:
        type: string
        description: The title of the activity
      start:
        type: number
        format: int64
        description: The unix timestamp when the activity is due to start
      duration:
        type: number
        format: int32
        description: The duration of activity in minutes, if author did not specify duration than default is used
      privacy:
        type: string
        description: The privacy mode of the activity, allowed values are `public`, `private` or `shared`
      author:
        $ref: "#/definitions/User"
      rsvp:
        type: object
        required:
          - items
          - total
        properties:
          items:
            $ref: "#/definitions/Users"
          total:
            type: number
            format: int64
            description: The total activity rsvp'd users
      likes:
        type: object
        required:
          - items
          - total
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/LikeDetail"
          total:
            type: number
            format: int64
            description: The total activity likes
      photos:
        type: object
        required:
          - items
          - total
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/PhotoDetail"
          total:
            type: number
            format: int64
            description: The total activity photos
      comments:
        type: object
        required:
          - items
          - total
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/CommentDetail"
          total:
            type: number
            format: int64
            description: The total activity comments
      createdAt:
        type: number
        format: int64
        description: The unix timestamp when this resource is created in the system
      updatedAt:
        type: number
        format: int64
        description: The unix timestamp when this resource is last updated in the system
  Comment:
    type: object
    required:
      - id
      - activityId
      - author
      - createdAt
      - updatedAt
    properties:
      id:
        type: string
        description: The unique id of the comment resource
      activityId:
        type: string
        description: The activity id for this comment
      text:
        type: string
        description: The text comment
      photos:
        $ref: "#/definitions/ImagesWithSignedUrl"
      author:
        type: string
        description: The id of the author of this comment
      parent:
        type: string
        description: If this comment is a comment on another comment, than this is the parent id
      createdAt:
        type: number
        format: int64
        description: The unix timestamp when this resource is created in the system
      updatedAt:
        type: number
        format: int64
        description: The unix timestamp when this resource is last updated in the system
  PublicFeed:
    type: object
    required:
      - id
      - title
      - privacy
      - author
      - rsvp
      - createdAt
      - updatedAt
    properties:
      id:
        type: string
        description: The unique id of the activity resource
      title:
        type: string
        description: The title of the activity
      start:
        type: number
        format: int64
        description: The unix timestamp when the activity is due to start
      duration:
        type: number
        format: int32
        description: The duration of activity in minutes, if author did not specify duration than default is used
      location:
        type: string
        description: The optional location of the activity
      meetingPoint:
        type: string
        description: The optional meeting point
      notes:
        type: string
        description: The optional activity notes. Notes describe any additional details about activity
      privacy:
        type: string
        description: The privacy mode of the activity, allowed values are `public`, `private` or `shared`
      author:
        $ref: "#/definitions/User"
      parent:
        type: string
        description: If this activity is result of sharing an activity, parent refers to original activity that was shared
      rsvp:
        type: object
        required:
          - items
          - total
        properties:
          # the list of most recently joined users
          items:
            $ref: "#/definitions/Users"
          total:
            type: number
            format: int64
            description: The total number of joined users
      createdAt:
        type: number
        format: int64
        description: The unix timestamp when this resource is created in the system
      updatedAt:
        type: number
        format: int64
        description: The unix timestamp when this resource is last updated in the system
  PublicFeeds:
    type: array
    items:
      $ref: "#/definitions/PublicFeed"
  MyFeed:
    type: object
  MyFeeds:
    type: array
    items:
      $ref: "#/definitions/MyFeed"
  ProfileFeed:
    type: object
  ProfileFeeds:
    type: array
    items:
      $ref: "#/definitions/ProfileFeed"
  UpcomingFeed:
    type: object
  UpcomingFeeds:
    type: array
    items:
      $ref: "#/definitions/UpcomingFeed"
  AddRemoveFollowersReq:
    type: object
    required:
      - userId
    properties:
      userId:
        type: string
        description: The id of the user
  AddRemoveBlockReq:
    type: object
    required:
      - blockedId
    properties:
      blockedId:
        type: string
        description: The id of the user to add/remove to block list
  Error:
    type: object
    required:
      - requestId
      - message
      - code
      - status
    properties:
      requestId:
        type: string
        description: The unique UUID assigned to this request. This should be quoted while raising a support request from backend team.
      message:
        type: string
        description: The general description of probable cause of error.
      code:
        type: string
        description: The unique error code, that defines this error. This error code can be referenced to raise support request to backend team.
      status:
        type: integer
        format: int32
        description: The http status code assigned to this error
